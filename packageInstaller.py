# -*- coding: utf-8 -*-
"""
this file will handle everything to make sure that we have a correct package installed
these functions should only be called from the MEL file
and its only created because MEL is extremely limited

it probably needs to be moved next to the MEL file, and the only arguments necessary might be the paths, \
allthough we might be able to find that based on the current file(needs to be tested!)
what this should do:
 - check if there is already a folder named skinningtools
 - move the old folder into a backup or ask the user to delete?
 - copy contents of package over to new file
 - download extra information from google drive and unzip in correct locations

#------------------------------------------#
|         SkinningTools v5.0               |
|                                          |
|      |                           |       |
|      |           banner          |       |
|      |                           |       |
|                                          |
|               [  install   ]             | # < could also be : [overwrite] [backup previous]
|                                          |
|                                          |
|         extras:                          |
|                                          |
|  []keep old settings                     | # < copy the settings ini from previous setup to new (only use this(/make visible) when there is an older version)
|                                          |   # V  following functions are examples, need to be added based on necessity
|  []tooltip gifs                          | # <these functions should be added when necessary
|  []videos                                | # <these functions should be added when necessary
|  []help documentation                    | # <these functions should be added when necessary
|                                          |
|  [       create shelf button          ]  |
|                                          |
|                                          |
|                                          |
|                                          |
|  [##########% progress bar            ]  |
#------------------------------------------#
"""
import os, shutil, datetime

CURRENTFOLDER = os.path.dirname(__file__)

from SkinningTools.UI.qt_util import *
from SkinningTools.UI import utils
from SkinningTools.Maya import api
from maya import cmds

__VERSION__ = "5.0.20210113"

class InstallWindow(QDialog):
    def __init__(self,scriptDir, parent = None):
        super(InstallWindow, self).__init__(parent)

        self.setWindowTitle("install SkinningTools %s"%__VERSION__)
        
        self.__scriptDir = scriptDir
        self.__skinFile = os.path.join(self.__scriptDir, "SkinningTools")
        self.__exists = os.path.exists(self.__skinFile )
        self.__oldSettings =  os.path.join(self.__skinFile, "UI/settings.ini")
        # ---- simple banner
        self.setLayout(utils.nullVBoxLayout(size = 1))

        inString = ['', '.png']
        img = utils.convertStringToImage(inString)
        lbl = utils.toolButton(img, size = QSize(577, 148))

        self.layout().addWidget(lbl)

        # ---- bbasic functions when skinningtools already exist
        if self.__exists:
            self.cbx = QComboBox()
            for item in ["backup", "replace"]:
                self.cbx.addItem(item)
            self.layout().addWidget(self.cbx)

            if os.path.exists(self.__oldSettings):
                self.oldSettings = QCheckBox("keep old settings?")
                self.oldSettings.setChecked(True)
                self.layout().addWidget(self.oldSettings)

        # ---- this is the place where we can add extra infromation gathering options


        # ---- the installButtons

        self.layout().addItem(QSpacerItem(2,2,QSizePolicy.Minimum, QSizePolicy.Expanding))
        installBtn = utils.pushButton("install skinningtools")
        self.layout().addWidget(installBtn)
        self.progress = QProgressBar()
        self.layout().addWidget(self.progress)
        installBtn.clicked.connect(self.install)

    def install(self):
        utils.setProgress(0, self.progress, "start installing the skinningtools")
        if self.__exists:
            # ---- copy old settings file 
            if os.path.exists(self.__oldSettings) and self.oldSettings.isChecked():
                newIni = os.path.join(CURRENTFOLDER, "SkinningTools/UI/settings.ini")
                with open(newIni, "wb") as fh:
                    pass
                shutil.copy2(self.__oldSettings, newIni)
                utils.setProgress(10, self.progress, "copied old settings")
            # ---- check what to do with previous version
            if self.cbx.currentIndex() == 1:
                shutil.rmtree(self.__skinFile)
                utils.setProgress(30, self.progress, "removed original folder")
            else:
                now = datetime.datetime.now( )
                versionDate = "%s%02d%02d" % (now.year, now.month, now.day)
                backup = os.path.join(self.__scriptDir, "Backup_%s"%versionDate)
                if os.path.exists(backup):
                    print("backup already created: %s"%backup)
                else:
                    shutil.move(self.__skinFile, backup)
                    utils.setProgress(30, self.progress, "backed up folder as: Backup_%s"%versionDate)

        utils.setProgress(40, self.progress, "move skinningtools")
        shutil.move(os.path.join(CURRENTFOLDER, "SkinningTools"), os.path.join(self.__scriptDir, "SkinningTools"))
        utils.setProgress(100, self.progress, "skinningtools installed")

        self.close()


    def downloadExtraFiles(self, currentSkinningFolder):
        """ download the package, we need to make sure it also unpacks itself!
        this could be necessary and handy for multiple files
        currently we download a zip, maybe downloading individual gifs is slower but allows for more transparency on what is going on (progressbar?)

        we only need the download id and the place to put it
        """
        tooltip = os.path.join(currentSkinningFolder, "Maya/toolTips")
        if not os.path.exists(tooltip):
            os.makedirs(tooltip)
        toFolder = os.path.join(currentSkinningFolder, "Maya/toolTips/toolTips.7z")  #< lets make sure this is placed correctly when the time comes
        if not os.path.exists(toFolder):
            with open(toFolder, 'w'): pass
        print("gdrive install to folder: %s"%toFolder)
        # changed id based on what needs to be downlaoded, we can now acces elements based on what file they need to represent
        files = {
                "testFile.7z" : "https://drive.google.com/file/d/1owj0sLVrNjK3uvBQqBcoIK2Ty-XyUPBx/view?usp=sharing"
        }
        
        utils.gDriveDownload(files, toFolder)


def doFunction(useLocalMayaFolder = True):
    """use this function to gather all the data necessary that is to be moved"""
    currentMaya = cmds.about(v=1)
    if useLocalMayaFolder:
        scriptDir =  cmds.internalVar(userScriptDir=1) #< move to a local path in maya for testing purposes
    else:
        scriptDir =  cmds.internalVar(userScriptDir=1).replace("%s/"%currentMaya, "")
    
    myWindow = InstallWindow(scriptDir,  parent = api.get_maya_window())
    myWindow.exec_()

